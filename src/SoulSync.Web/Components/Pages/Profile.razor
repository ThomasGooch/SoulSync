@page "/profile/{UserId}"
@using SoulSync.Core.Domain
@using SoulSync.Core.Interfaces
@inject IUserRepository UserRepository

<PageTitle>Profile - SoulSync</PageTitle>

<div class="container py-5">
    @if (_isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading profile...</p>
        </div>
    }
    else if (_user == null)
    {
        <div class="alert alert-warning" role="alert">
            User not found
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-4">
                <div class="card shadow-sm mb-4">
                    <div class="card-body text-center p-4">
                        <img src="https://ui-avatars.com/api/?name=@(_user.FirstName)+@(_user.LastName)&size=200&background=667eea&color=fff" 
                             class="rounded-circle mb-3" 
                             alt="@_user.FullName" 
                             width="200" 
                             height="200"/>
                        <h3 class="fw-bold mb-1">@_user.FullName</h3>
                        <p class="text-muted mb-0">@_user.Age years old</p>
                        @if (!string.IsNullOrEmpty(_user.Profile?.Location))
                        {
                            <p class="text-muted">
                                <i class="bi bi-geo-alt"></i> @_user.Profile.Location
                            </p>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-8">
                <div class="card shadow-sm mb-4">
                    <div class="card-body p-4">
                        <h5 class="card-title fw-bold mb-3">About Me</h5>
                        @if (!string.IsNullOrEmpty(_user.Bio))
                        {
                            <p class="card-text">@_user.Bio</p>
                        }
                        else
                        {
                            <p class="text-muted">No bio available</p>
                        }
                    </div>
                </div>

                @if (_user.Profile != null && _user.Profile.InterestTags.Any())
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-body p-4">
                            <h5 class="card-title fw-bold mb-3">Interests</h5>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var interest in _user.Profile.InterestTags)
                                {
                                    <span class="badge bg-primary-subtle text-primary px-3 py-2">
                                        @interest
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (_user.Profile != null && !string.IsNullOrEmpty(_user.Profile.Occupation))
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-body p-4">
                            <h5 class="card-title fw-bold mb-3">Professional Details</h5>
                            <p><strong>Occupation:</strong> @_user.Profile.Occupation</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string UserId { get; set; } = string.Empty;

    private User? _user;
    private bool _isLoading = true;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadUserProfile();
    }

    private async Task LoadUserProfile()
    {
        _isLoading = true;
        _errorMessage = null;

        try
        {
            if (Guid.TryParse(UserId, out var userId))
            {
                _user = await UserRepository.GetByIdAsync(userId);
            }
            else
            {
                _errorMessage = "Invalid user ID";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }
}

<style>
    .bg-primary-subtle {
        background-color: rgba(102, 126, 234, 0.1);
    }
    
    .badge {
        font-size: 0.9rem;
        font-weight: 500;
    }
</style>
