@page "/login"
@using SoulSync.Core.Authentication
@using SoulSync.Core.Interfaces
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Login - SoulSync</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <h2 class="fw-bold">ðŸ’• Welcome Back</h2>
                        <p class="text-muted">Login to find your perfect match</p>
                    </div>

                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @_errorMessage
                        </div>
                    }

                    <EditForm Model="@_loginModel" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <InputText id="email" 
                                      type="email" 
                                      class="form-control" 
                                      @bind-Value="_loginModel.Email" 
                                      placeholder="your.email@example.com" 
                                      required />
                            <ValidationMessage For="@(() => _loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" 
                                      type="password" 
                                      class="form-control" 
                                      @bind-Value="_loginModel.Password" 
                                      placeholder="Enter your password" 
                                      required />
                            <ValidationMessage For="@(() => _loginModel.Password)" />
                        </div>

                        <div class="d-grid gap-2 mb-3">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Logging in...</span>
                                }
                                else
                                {
                                    <span>Login</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="text-center">
                        <p class="mb-0">
                            Don't have an account? 
                            <a href="/register" class="text-decoration-none fw-semibold">Sign up here</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel _loginModel = new();
    private string? _errorMessage;
    private bool _isLoading;

    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        _isLoading = true;
        _errorMessage = null;

        try
        {
            var request = new AuthenticationRequest
            {
                Email = _loginModel.Email,
                Password = _loginModel.Password
            };

            var result = await AuthService.AuthenticateAsync(request);

            if (result.IsSuccess)
            {
                // Store token (in a real app, use a secure storage mechanism)
                // For now, just navigate to the home page
                Navigation.NavigateTo("/");
            }
            else
            {
                _errorMessage = result.ErrorMessage ?? "Invalid credentials";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }
}

<style>
    .card {
        border-radius: 15px;
        border: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
    }
</style>
